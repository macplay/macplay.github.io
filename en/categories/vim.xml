<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="../../assets/xml/rss.xsl" media="all"?><rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>MacPlay (Posts about vim)</title><link>https://macplay.github.io/</link><description></description><atom:link href="https://macplay.github.io/en/categories/vim.xml" rel="self" type="application/rss+xml"></atom:link><language>en</language><copyright>Contents © 2020 &lt;a href="mailto:ashfinal@sina.cn"&gt;ashfinal&lt;/a&gt; </copyright><lastBuildDate>Wed, 26 Aug 2020 08:50:31 GMT</lastBuildDate><generator>Nikola (getnikola.com)</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>The power of diff</title><link>https://macplay.github.io/en/posts/the-power-of-diff/</link><dc:creator>ashfinal</dc:creator><description>&lt;div&gt;&lt;p&gt;Lots of people use vimdiff to understand and handle diffs in console mode. While there exist more specialized tools for comparing files, vimdiff has always worked well enough for me.&lt;/p&gt;
&lt;div class="section" id="the-inefficiency-of-the-external-diff"&gt;
&lt;h2&gt;The inefficiency of the external diff&lt;/h2&gt;
&lt;p&gt;However, Vim’s diff mode was seriously lacking. This was basically because it needed to write down temporary files, shell out and run a manual diff command and parse the result back and as one can imagine, this could be slow and was seriously inefficient.&lt;/p&gt;
&lt;p&gt;Additionally, this required to have a diff binary available that was able to create &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Diff#Edit_script"&gt;ed like style diff&lt;/a&gt;, so one could not even fall-back to using git-diff (which is considered to have one of the best tested diff libraries and allows to select different algorithms) for creating those diffs. This lead to the creation of vimscript &lt;a class="reference external" href="https://github.com/chrisbra/vim-diff-enhanced"&gt;plugins&lt;/a&gt;, that would internally translate a unified diff back into an ed-like diff. Of course this would add an extra performance penalty.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://macplay.github.io/en/posts/the-power-of-diff/"&gt;Read more…&lt;/a&gt; (2 min remaining to read)&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;</description><category>asciinema</category><category>diff</category><category>vim</category><guid>https://macplay.github.io/en/posts/the-power-of-diff/</guid><pubDate>Thu, 14 Nov 2019 14:28:48 GMT</pubDate></item><item><title>在浏览器中运行 Vim 编辑器</title><link>https://macplay.github.io/en/posts/run-vim-editor-on-browsers/</link><dc:creator>ashfinal</dc:creator><description>&lt;figure&gt;&lt;img src="https://macplay.github.io/images/chrome_vim_wasm.thumbnail.png"&gt;&lt;/figure&gt; &lt;div&gt;&lt;p&gt;有人将 Vim 编辑器移植到了 WebAssembly (Wasm) 格式： &lt;a class="reference external" href="https://github.com/rhysd/vim.wasm"&gt;vim.wasm: Vim Ported to WebAssembly&lt;/a&gt; 。 &lt;a class="reference external" href="https://webassembly.org/"&gt;Wasm&lt;/a&gt; 是一种底层的二进制指令格式，理论上能实现接近 C/C++/Rust 等编译性语言的执行速度，目前已经在主流浏览器 Chrome/Safari/Firefox/Edge 中得到支持。所以现在，你可以在浏览器上体验原汁原味的 Vim 了！&lt;/p&gt;
&lt;div class="figure align-center"&gt;
&lt;img alt="vim.wasm on chrome" src="https://macplay.github.io/images/chrome_vim_wasm.png"&gt;
&lt;/div&gt;
&lt;p&gt;&lt;a href="https://macplay.github.io/en/posts/run-vim-editor-on-browsers/"&gt;Read more…&lt;/a&gt; (1 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><guid>https://macplay.github.io/en/posts/run-vim-editor-on-browsers/</guid><pubDate>Wed, 23 Oct 2019 13:29:00 GMT</pubDate></item><item><title>Vim Cheatsheet</title><link>https://macplay.github.io/en/posts/vim-cheatsheet-2/</link><dc:creator>ashfinal</dc:creator><description>&lt;div class="figure align-center"&gt;
&lt;a class="reference external image-reference" href="https://macplay.github.io/images/vim_cheatsheet.png"&gt;&lt;img alt="vim cheatsheet" src="https://macplay.github.io/images/vim_cheatsheet.thumbnail.png"&gt;&lt;/a&gt;
&lt;p class="caption"&gt;&lt;em&gt;via&lt;/em&gt; &lt;a class="reference external" href="https://github.com/mhinz/vim-galore"&gt;vim-galore&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;</description><guid>https://macplay.github.io/en/posts/vim-cheatsheet-2/</guid><pubDate>Sat, 19 Oct 2019 10:48:45 GMT</pubDate></item><item><title>Writing a plugin that loads quickly</title><link>https://macplay.github.io/en/posts/writing-a-plugin-that-loads-quickly/</link><dc:creator>ashfinal</dc:creator><description>&lt;div&gt;&lt;div class="figure align-center"&gt;
&lt;a class="reference external image-reference" href="https://macplay.github.io/images/lazy_loading.jpg"&gt;&lt;img alt="lazy loading" src="https://macplay.github.io/images/lazy_loading.thumbnail.jpg"&gt;&lt;/a&gt;
&lt;/div&gt;
&lt;p&gt;A plugin may grow and become quite long. The startup delay may become noticeable, while you hardly ever use the plugin. Then it's time for a quickload plugin.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://macplay.github.io/en/posts/writing-a-plugin-that-loads-quickly/"&gt;Read more…&lt;/a&gt; (2 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>plugin</category><category>vim</category><guid>https://macplay.github.io/en/posts/writing-a-plugin-that-loads-quickly/</guid><pubDate>Fri, 18 Oct 2019 06:11:04 GMT</pubDate></item><item><title>Improve and Extend Your Text Objects With targets.vim</title><link>https://macplay.github.io/en/posts/improve-and-extend-your-text-objects-with-targetsvim/</link><dc:creator>ashfinal</dc:creator><description>&lt;div&gt;&lt;p&gt;Welcome back to the &lt;a class="reference external" href="https://www.barbarianmeetscoding.com/blog/categories/exploring-vim-plugins"&gt;Exploring Vim Plugins series&lt;/a&gt; ! In this series you learn how to become a little bit more productive each day by discovering awesome Vim plugins and how to master them. And today, it’s time for one of my favorites: &lt;a class="reference external" href="https://github.com/wellle/targets.vim"&gt;targets.vim&lt;/a&gt; .&lt;/p&gt;
&lt;div class="figure align-center"&gt;
&lt;img alt="become 1 percent better" src="https://macplay.github.io/images/become-1-percent-better.jpg"&gt;
&lt;/div&gt;
&lt;p&gt;&lt;a href="https://macplay.github.io/en/posts/improve-and-extend-your-text-objects-with-targetsvim/"&gt;Read more…&lt;/a&gt; (2 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>translation</category><category>vim</category><guid>https://macplay.github.io/en/posts/improve-and-extend-your-text-objects-with-targetsvim/</guid><pubDate>Fri, 11 Oct 2019 09:05:40 GMT</pubDate></item><item><title>What is your most productive shortcut with Vim?</title><link>https://macplay.github.io/en/posts/what-is-your-most-productive-shortcut-with-vim/</link><dc:creator>ashfinal</dc:creator><description>&lt;div&gt;&lt;div class="figure align-center"&gt;
&lt;a class="reference external image-reference" href="https://macplay.github.io/images/vim-keyboard-cover-macbook.jpg"&gt;&lt;img alt="/images/vim-keyboard-cover-macbook.thumbnail.jpg" src="https://macplay.github.io/images/vim-keyboard-cover-macbook.thumbnail.jpg"&gt;&lt;/a&gt;
&lt;/div&gt;
&lt;p&gt;I've heard a lot about &lt;a class="reference external" href="http://www.vim.org"&gt;Vim&lt;/a&gt; , both pros and cons. It really seems you should be (as a developer) faster with Vim than with any other editor. I'm using Vim to do some basic stuff and I'm at best 10 times less productive with Vim.&lt;/p&gt;
&lt;p&gt;The only two things you should care about when you talk about speed (you may not care enough about them, but you should) are:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;&lt;p&gt;Using alternatively left and right hands is the &lt;strong&gt;fastest&lt;/strong&gt; way to use the keyboard.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Never touching the mouse is the second way to be as fast as possible. It takes ages for you to move your hand, grab the mouse, move it, and bring it back to the keyboard (and you often have to look at the keyboard to be sure you returned your hand properly to the right place)&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Here are two examples demonstrating why I'm far less productive with Vim.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://macplay.github.io/en/posts/what-is-your-most-productive-shortcut-with-vim/"&gt;Read more…&lt;/a&gt; (3 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>linux</category><category>vim</category><guid>https://macplay.github.io/en/posts/what-is-your-most-productive-shortcut-with-vim/</guid><pubDate>Sun, 29 Sep 2019 00:50:23 GMT</pubDate></item><item><title>Oni 0.32 版本释出</title><link>https://macplay.github.io/en/posts/oni-032-ban-ben-shi-chu/</link><dc:creator>ashfinal</dc:creator><description>&lt;div&gt;&lt;!-- vim:set et sw=4 ts=4 ft=rst: --&gt;
&lt;!-- This file interpreters the title of URL in links.ref --&gt;
&lt;!-- vim:set et sw=4 ts=4 ft=rst: --&gt;
&lt;div class="figure align-center"&gt;
&lt;img alt="/images/oni_release.png" src="https://macplay.github.io/images/oni_release.png"&gt;
&lt;/div&gt;
&lt;div class="admonition attention"&gt;
&lt;p class="admonition-title"&gt;注意&lt;/p&gt;
&lt;p&gt;Since they've moved to oni2, that changed lots of things, I'm gonna flag this post as obsolete. DON'T READ!&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;本来对这次版本更新还有些不以为然：为何不把精力放在完善 &lt;a class="reference external" href="https://langserver.org/"&gt;Language Server Protocol&lt;/a&gt; 支持，而跑去写什么新手教程呢？直到今天尝试了下教程，又看了文字版更新内容，才明白过来：Oni 编辑器正朝着我期待的方向前进！&lt;/p&gt;
&lt;p&gt;来看看本次更新的两个重要功能：&lt;/p&gt;
&lt;p&gt;&lt;a href="https://macplay.github.io/en/posts/oni-032-ban-ben-shi-chu/"&gt;Read more…&lt;/a&gt; (2 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><guid>https://macplay.github.io/en/posts/oni-032-ban-ben-shi-chu/</guid><pubDate>Sat, 14 Apr 2018 14:55:50 GMT</pubDate></item><item><title>从 URL 构建行内链接</title><link>https://macplay.github.io/en/posts/cong-url-gou-jian-xing-nei-lian-jie/</link><dc:creator>ashfinal</dc:creator><description>&lt;div&gt;&lt;p&gt;昨天看到论坛有人谈到 &lt;a class="reference external" href="https://emacs-china.org/t/topic/5301"&gt;从 URL 构建 Markdown 行内链接 - Emacs-general - Emacs China&lt;/a&gt; 。其实，这个功能早就存在于 Emmet 插件中。之前个人写 Markdown 文档的时候就用到过，体验非常不错。具体就是：在文档内的链接处按下快捷键，将会自动提取网页标题，并插入 Markdown 风格的行内链接。这样你就不必再额外复制链接标题，甚至个别情况下还得提前在浏览器中打开链接。&lt;/p&gt;
&lt;p&gt;实际上，该功能不仅能构建 Markdown 行内链接，还可以在网页文件中使用 &lt;code class="docutils literal"&gt;&amp;lt;a&amp;gt;&lt;/code&gt; 标签构建 HTML 风格的链接。在 Vim 编辑器中，文件类型是自动识别的，因此并不需要额外做什么设置。&lt;/p&gt;
&lt;p&gt;鉴于我个人 &lt;a class="reference external" href="https://macplay.github.io/posts/cong-markdown-dao-restructuredtext/"&gt;从 Markdown 转向 reStructuredText&lt;/a&gt; 已久，对该功能自然而然就用的不多起来。然而，当写 reStructuredText 文档时，当插入链接时不得不皱着眉，分两次分别复制网页链接和标题，再拼凑成 reStructuredText 风格的行内链接时。我总是不由地想起 Markdown 插入链接时的惬意顺畅。只不过，个人比较懒 - - 一直没采取任何行动，忍受着书写体验下降的情况。&lt;/p&gt;
&lt;p&gt;现在经网友这么一提，心思抖起，觉得是时候解决一下这个“小问题”了。&lt;/p&gt;
&lt;p&gt;&lt;a href="https://macplay.github.io/en/posts/cong-url-gou-jian-xing-nei-lian-jie/"&gt;Read more…&lt;/a&gt; (1 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><guid>https://macplay.github.io/en/posts/cong-url-gou-jian-xing-nei-lian-jie/</guid><pubDate>Sat, 17 Mar 2018 11:57:58 GMT</pubDate></item><item><title>迁移到 onivim</title><link>https://macplay.github.io/en/posts/qian-yi-dao-onivim/</link><dc:creator>ashfinal</dc:creator><description>&lt;div&gt;&lt;!-- vim:set et sw=4 ts=4 ft=rst: --&gt;
&lt;!-- vim:set et sw=4 ts=4 ft=rst: --&gt;
&lt;!-- This file interpreters the title of URL in links.ref --&gt;
&lt;!-- vim:set et sw=4 ts=4 ft=rst: --&gt;
&lt;p&gt;关注 &lt;a class="reference external" href="https://github.com/onivim/oni"&gt;Oni: Modern Modal Editing - powered by Neovim&lt;/a&gt; 有一段时间了。根据主页描述，Oni 是个基于 Electron 技术实现的 Neovim 前端，对 &lt;a class="reference external" href="https://langserver.org/"&gt;Language Server Protocol&lt;/a&gt; 支持很全面。不过，之前使用 &lt;a class="reference external" href="https://github.com/qvacua/vimr"&gt;VimR&lt;/a&gt; 还算舒心，而 Oni 则起步较晚，一些功能还不完善。因此并没有动迁移的念头。&lt;/p&gt;
&lt;p&gt;不过最近几天在折腾 &lt;a class="reference external" href="https://macplay.github.io/categories/manjaro/"&gt;manjaro&lt;/a&gt; ，当寻找 Linux 下的 Neovim 前端时，试用了一圈竟然没有一个好用的！或多或少都存在一些问题。于是，无奈之下，我在 U 盘的 manjaro 操作系统上尝试了“臃肿”的 Electron 编辑器。其结果是出乎我意料之外的：Oni 已经达到了日常堪用的水平，而且与我之前的 vimrc 配置协作良好。&lt;/p&gt;
&lt;p&gt;&lt;a href="https://macplay.github.io/en/posts/qian-yi-dao-onivim/"&gt;Read more…&lt;/a&gt; (2 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><guid>https://macplay.github.io/en/posts/qian-yi-dao-onivim/</guid><pubDate>Thu, 15 Mar 2018 10:08:03 GMT</pubDate></item><item><title>Vim Cheatsheet</title><link>https://macplay.github.io/en/posts/vim-cheat-sheet/</link><dc:creator>ashfinal</dc:creator><description>&lt;div class="figure align-center"&gt;
&lt;a class="reference external image-reference" href="https://macplay.github.io/images/vim-cheat-sheet-full.png"&gt;&lt;img alt="/images/vim-cheat-sheet-full.thumbnail.png" src="https://macplay.github.io/images/vim-cheat-sheet-full.thumbnail.png"&gt;&lt;/a&gt;
&lt;/div&gt;</description><guid>https://macplay.github.io/en/posts/vim-cheat-sheet/</guid><pubDate>Wed, 06 Dec 2017 11:19:24 GMT</pubDate></item></channel></rss>