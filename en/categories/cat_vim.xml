<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="../../assets/xml/rss.xsl" media="all"?><rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>MacPlay (Posts about vim)</title><link>https://macplay.github.io/</link><description></description><atom:link href="https://macplay.github.io/en/categories/cat_vim.xml" rel="self" type="application/rss+xml"></atom:link><language>en</language><copyright>Contents © 2020 &lt;a href="mailto:ashfinal@sina.cn"&gt;ashfinal&lt;/a&gt; </copyright><lastBuildDate>Wed, 26 Aug 2020 08:50:33 GMT</lastBuildDate><generator>Nikola (getnikola.com)</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>The power of diff</title><link>https://macplay.github.io/en/posts/the-power-of-diff/</link><dc:creator>ashfinal</dc:creator><description>&lt;div&gt;&lt;p&gt;Lots of people use vimdiff to understand and handle diffs in console mode. While there exist more specialized tools for comparing files, vimdiff has always worked well enough for me.&lt;/p&gt;
&lt;div class="section" id="the-inefficiency-of-the-external-diff"&gt;
&lt;h2&gt;The inefficiency of the external diff&lt;/h2&gt;
&lt;p&gt;However, Vim’s diff mode was seriously lacking. This was basically because it needed to write down temporary files, shell out and run a manual diff command and parse the result back and as one can imagine, this could be slow and was seriously inefficient.&lt;/p&gt;
&lt;p&gt;Additionally, this required to have a diff binary available that was able to create &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Diff#Edit_script"&gt;ed like style diff&lt;/a&gt;, so one could not even fall-back to using git-diff (which is considered to have one of the best tested diff libraries and allows to select different algorithms) for creating those diffs. This lead to the creation of vimscript &lt;a class="reference external" href="https://github.com/chrisbra/vim-diff-enhanced"&gt;plugins&lt;/a&gt;, that would internally translate a unified diff back into an ed-like diff. Of course this would add an extra performance penalty.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://macplay.github.io/en/posts/the-power-of-diff/"&gt;Read more…&lt;/a&gt; (2 min remaining to read)&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;</description><category>asciinema</category><category>diff</category><category>vim</category><guid>https://macplay.github.io/en/posts/the-power-of-diff/</guid><pubDate>Thu, 14 Nov 2019 14:28:48 GMT</pubDate></item><item><title>在浏览器中运行 Vim 编辑器</title><link>https://macplay.github.io/en/posts/run-vim-editor-on-browsers/</link><dc:creator>ashfinal</dc:creator><description>&lt;figure&gt;&lt;img src="https://macplay.github.io/images/chrome_vim_wasm.thumbnail.png"&gt;&lt;/figure&gt; &lt;div&gt;&lt;p&gt;有人将 Vim 编辑器移植到了 WebAssembly (Wasm) 格式： &lt;a class="reference external" href="https://github.com/rhysd/vim.wasm"&gt;vim.wasm: Vim Ported to WebAssembly&lt;/a&gt; 。 &lt;a class="reference external" href="https://webassembly.org/"&gt;Wasm&lt;/a&gt; 是一种底层的二进制指令格式，理论上能实现接近 C/C++/Rust 等编译性语言的执行速度，目前已经在主流浏览器 Chrome/Safari/Firefox/Edge 中得到支持。所以现在，你可以在浏览器上体验原汁原味的 Vim 了！&lt;/p&gt;
&lt;div class="figure align-center"&gt;
&lt;img alt="vim.wasm on chrome" src="https://macplay.github.io/images/chrome_vim_wasm.png"&gt;
&lt;/div&gt;
&lt;p&gt;&lt;a href="https://macplay.github.io/en/posts/run-vim-editor-on-browsers/"&gt;Read more…&lt;/a&gt; (1 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><guid>https://macplay.github.io/en/posts/run-vim-editor-on-browsers/</guid><pubDate>Wed, 23 Oct 2019 13:29:00 GMT</pubDate></item><item><title>Vim Cheatsheet</title><link>https://macplay.github.io/en/posts/vim-cheatsheet-2/</link><dc:creator>ashfinal</dc:creator><description>&lt;div class="figure align-center"&gt;
&lt;a class="reference external image-reference" href="https://macplay.github.io/images/vim_cheatsheet.png"&gt;&lt;img alt="vim cheatsheet" src="https://macplay.github.io/images/vim_cheatsheet.thumbnail.png"&gt;&lt;/a&gt;
&lt;p class="caption"&gt;&lt;em&gt;via&lt;/em&gt; &lt;a class="reference external" href="https://github.com/mhinz/vim-galore"&gt;vim-galore&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;</description><guid>https://macplay.github.io/en/posts/vim-cheatsheet-2/</guid><pubDate>Sat, 19 Oct 2019 10:48:45 GMT</pubDate></item><item><title>Writing a plugin that loads quickly</title><link>https://macplay.github.io/en/posts/writing-a-plugin-that-loads-quickly/</link><dc:creator>ashfinal</dc:creator><description>&lt;div&gt;&lt;div class="figure align-center"&gt;
&lt;a class="reference external image-reference" href="https://macplay.github.io/images/lazy_loading.jpg"&gt;&lt;img alt="lazy loading" src="https://macplay.github.io/images/lazy_loading.thumbnail.jpg"&gt;&lt;/a&gt;
&lt;/div&gt;
&lt;p&gt;A plugin may grow and become quite long. The startup delay may become noticeable, while you hardly ever use the plugin. Then it's time for a quickload plugin.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://macplay.github.io/en/posts/writing-a-plugin-that-loads-quickly/"&gt;Read more…&lt;/a&gt; (2 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>plugin</category><category>vim</category><guid>https://macplay.github.io/en/posts/writing-a-plugin-that-loads-quickly/</guid><pubDate>Fri, 18 Oct 2019 06:11:04 GMT</pubDate></item><item><title>Improve and Extend Your Text Objects With targets.vim</title><link>https://macplay.github.io/en/posts/improve-and-extend-your-text-objects-with-targetsvim/</link><dc:creator>ashfinal</dc:creator><description>&lt;div&gt;&lt;p&gt;Welcome back to the &lt;a class="reference external" href="https://www.barbarianmeetscoding.com/blog/categories/exploring-vim-plugins"&gt;Exploring Vim Plugins series&lt;/a&gt; ! In this series you learn how to become a little bit more productive each day by discovering awesome Vim plugins and how to master them. And today, it’s time for one of my favorites: &lt;a class="reference external" href="https://github.com/wellle/targets.vim"&gt;targets.vim&lt;/a&gt; .&lt;/p&gt;
&lt;div class="figure align-center"&gt;
&lt;img alt="become 1 percent better" src="https://macplay.github.io/images/become-1-percent-better.jpg"&gt;
&lt;/div&gt;
&lt;p&gt;&lt;a href="https://macplay.github.io/en/posts/improve-and-extend-your-text-objects-with-targetsvim/"&gt;Read more…&lt;/a&gt; (2 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>translation</category><category>vim</category><guid>https://macplay.github.io/en/posts/improve-and-extend-your-text-objects-with-targetsvim/</guid><pubDate>Fri, 11 Oct 2019 09:05:40 GMT</pubDate></item><item><title>【译】Vim 不需要多光标编辑功能</title><link>https://macplay.github.io/en/posts/vim-bu-xu-yao-duo-guang-biao-bian-ji-gong-neng/</link><dc:creator>ashfinal</dc:creator><description>&lt;div&gt;&lt;p&gt;Sublime text 首次引入了多光标编辑功能 &lt;a class="footnote-reference brackets" href="https://macplay.github.io/en/posts/vim-bu-xu-yao-duo-guang-biao-bian-ji-gong-neng/#id2" id="id1"&gt;1&lt;/a&gt; （据我所知），这意味着可以在多个光标位置同时编辑代码。Vim 有个插件（&lt;a class="reference external" href="https://github.com/terryma/vim-multiple-cursors"&gt;vim-multiple-cursors&lt;/a&gt; ）模仿这一功能，但是存在一些问题。自动补全功能失效，撤销历史与我想象中的不一样，也无法把文本操作映射到某按键，以便在下次 Vim 会话中使用。还有，很难用眼睛跟踪所有光标，特别是当它们处于不同列的时候。使用该插件一段时间后，我得出结论：没有什么操作场景是 &lt;strong&gt;原生&lt;/strong&gt; Vim 特性无法完成的（以个人观点来看，完成的甚至比插件还要好）。&lt;/p&gt;
&lt;dl class="footnote brackets"&gt;
&lt;dt class="label" id="id2"&gt;&lt;span class="brackets"&gt;&lt;a class="fn-backref" href="https://macplay.github.io/en/posts/vim-bu-xu-yao-duo-guang-biao-bian-ji-gong-neng/#id1"&gt;1&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;我首次使用多光标编辑，是在 &lt;a class="reference external" href="http://www.scintilla.org/SciTE.html"&gt;SciTE&lt;/a&gt; 中。与 Sublime Text 一样，都使用相同的组件 Scintilla。SciTE 出现时间比 Sublime Text 更早，因此作者这一说法不太准确。——译者注&lt;/p&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;p&gt;&lt;a href="https://macplay.github.io/en/posts/vim-bu-xu-yao-duo-guang-biao-bian-ji-gong-neng/"&gt;Read more…&lt;/a&gt; (2 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><guid>https://macplay.github.io/en/posts/vim-bu-xu-yao-duo-guang-biao-bian-ji-gong-neng/</guid><pubDate>Tue, 21 Nov 2017 10:42:02 GMT</pubDate></item><item><title>Vim 弄丢了我的数据！</title><link>https://macplay.github.io/en/posts/vim-nong-diu-liao-wo-de-shu-ju/</link><dc:creator>ashfinal</dc:creator><description>&lt;div class="section" id="id1"&gt;
&lt;h2&gt;悲剧&lt;/h2&gt;
&lt;p&gt;昨天（啊不， &lt;span class="strike"&gt;前天&lt;/span&gt; &lt;span class="amend"&gt;大前天&lt;/span&gt; ）在写 &lt;a class="reference external" href="https://macplay.github.io/posts/zai-vim-zhong-shi-yong-undo-branches/"&gt;undo branches&lt;/a&gt; 那篇文章的时候，&lt;a class="reference external" href="https://github.com/qvacua/vimr"&gt;VimR&lt;/a&gt; 编辑器突然毫无征兆的崩溃退出，导致花费好半天翻译过来的几段文字全部丢失。颇具有讽刺意味的是，当时写的文章正是关于在 Vim 编辑器中如何使用 undo branches，避免丢失你宝贵的资料。事情发生时笔者从浏览器中复制了一段文字，然后直接按下 &lt;cite&gt;CMD + V&lt;/cite&gt; 粘贴，可能是其中含有一些特殊字符……悲剧就这样发生了。&lt;/p&gt;
&lt;p&gt;第一反应是去查看 undo 历史，很不幸那几段文字并没有保存其中。于是悲哀地意识到它们是永远也找不回来了：因为 undo branches 其实是保存文件撤销记录，而不是用来应对这种意外灾难的。&lt;strong&gt;真正的灾难应对机制已经被我关闭。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://macplay.github.io/en/posts/vim-nong-diu-liao-wo-de-shu-ju/"&gt;Read more…&lt;/a&gt; (1 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><guid>https://macplay.github.io/en/posts/vim-nong-diu-liao-wo-de-shu-ju/</guid><pubDate>Mon, 13 Nov 2017 11:57:10 GMT</pubDate></item><item><title>在 Markdown 及 rst 文档中使用代码补全功能</title><link>https://macplay.github.io/en/posts/zai-markdown-ji-rst-wen-dang-zhong-shi-yong-dai-ma-bu-quan-gong-neng/</link><dc:creator>ashfinal</dc:creator><description>&lt;div&gt;&lt;p&gt;大家都知道，写 Markdown 文档时可以使用代码区块（Code Blocks)。给代码片段指定语言类型，就有漂亮的语法高亮效果。那有没有想过，直接在代码区块中写 Python 代码呢？&lt;/p&gt;
&lt;p&gt;这个事情还真可以做到，方法是使用 Neovim + ncm。&lt;a class="reference external" href="https://github.com/roxma/nvim-completion-manager"&gt;ncm&lt;/a&gt; 全称 “nvim-completion-manager”，是针对 &lt;a class="reference external" href="https://github.com/neovim/neovim"&gt;Neovim&lt;/a&gt; 编辑器的一款异步补全框架（插件）。笔者从 &lt;a class="reference external" href="https://www.vim.org"&gt;Vim&lt;/a&gt; 转到 &lt;a class="reference external" href="https://github.com/neovim/neovim"&gt;Neovim&lt;/a&gt; ，重新搜寻补全插件的过程中，经过与 &lt;a class="reference external" href="https://github.com/Shougo/deoplete.nvim"&gt;deoplete&lt;/a&gt; &lt;a class="footnote-reference brackets" href="https://macplay.github.io/en/posts/zai-markdown-ji-rst-wen-dang-zhong-shi-yong-dai-ma-bu-quan-gong-neng/#id2" id="id1"&gt;1&lt;/a&gt; 的比较，迅速入了 &lt;a class="reference external" href="https://github.com/roxma/nvim-completion-manager"&gt;ncm&lt;/a&gt; 的坑。;-)&lt;/p&gt;
&lt;dl class="footnote brackets"&gt;
&lt;dt class="label" id="id2"&gt;&lt;span class="brackets"&gt;&lt;a class="fn-backref" href="https://macplay.github.io/en/posts/zai-markdown-ji-rst-wen-dang-zhong-shi-yong-dai-ma-bu-quan-gong-neng/#id1"&gt;1&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;另一款异步补全插件，由 Vim 大神 &lt;a class="reference external" href="https://github.com/Shougo"&gt;Shougo&lt;/a&gt; 开发。&lt;/p&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;p&gt;&lt;a href="https://macplay.github.io/en/posts/zai-markdown-ji-rst-wen-dang-zhong-shi-yong-dai-ma-bu-quan-gong-neng/"&gt;Read more…&lt;/a&gt; (1 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><guid>https://macplay.github.io/en/posts/zai-markdown-ji-rst-wen-dang-zhong-shi-yong-dai-ma-bu-quan-gong-neng/</guid><pubDate>Thu, 12 Oct 2017 07:45:30 GMT</pubDate></item><item><title>在 macOS 上使用 re-vim 配置</title><link>https://macplay.github.io/en/posts/zai-macos-shang-shi-yong-re-vim-pei-zhi/</link><dc:creator>ashfinal</dc:creator><description>&lt;div&gt;&lt;!-- vim:set et sw=4 ts=4 ft=rst: --&gt;
&lt;!-- vim:set et sw=4 ts=4 ft=rst: --&gt;
&lt;p&gt;使用 &lt;a class="reference external" href="https://macplay.github.io/categories/asciinema/"&gt;asciinema&lt;/a&gt; 详细讲解了在 macOS 上如何使用 &lt;a class="reference external" href="https://github.com/ashfinal/vimrc-config"&gt;re-vim&lt;/a&gt; 配置。&lt;/p&gt;
&lt;p&gt;涉及到 re-vim 30 秒快速部署、使用 brew 编译 vim、个性化定制 re-vim 等。&lt;/p&gt;
&lt;p&gt;录屏过程中展示了 re-vim 的部分功能，以及使用 re-vim 的一些注意事项。&lt;/p&gt;
&lt;p&gt;有点使用 asciinema 展示博客写作过程的感觉？&lt;/p&gt;
&lt;p&gt;可惜 asciinema 对中文支持还是有些小问题，不管怎样这算是一个很好的尝试。:)&lt;/p&gt;
&lt;p&gt;&lt;a href="https://macplay.github.io/en/posts/zai-macos-shang-shi-yong-re-vim-pei-zhi/"&gt;Read more…&lt;/a&gt; (1 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><guid>https://macplay.github.io/en/posts/zai-macos-shang-shi-yong-re-vim-pei-zhi/</guid><pubDate>Thu, 12 May 2016 13:31:51 GMT</pubDate></item></channel></rss>