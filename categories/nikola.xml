<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="../assets/xml/rss.xsl" media="all"?><rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>MacPlay (Posts about nikola)</title><link>https://macplay.github.io/</link><description></description><atom:link href="https://macplay.github.io/categories/nikola.xml" rel="self" type="application/rss+xml"></atom:link><language>zh_cn</language><copyright>Contents © 2020 &lt;a href="mailto:ashfinal@sina.cn"&gt;ashfinal&lt;/a&gt; </copyright><lastBuildDate>Wed, 26 Aug 2020 08:50:31 GMT</lastBuildDate><generator>Nikola (getnikola.com)</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>在 reStructuredText 中统一管理引用链接</title><link>https://macplay.github.io/posts/zai-restructuredtext-zhong-tong-yi-guan-li-yin-yong-lian-jie/</link><dc:creator>ashfinal</dc:creator><description>&lt;div&gt;&lt;!-- vim:set et sw=4 ts=4 ft=rst: --&gt;
&lt;!-- vim:set et sw=4 ts=4 ft=rst: --&gt;
&lt;!-- This file interpreters the title of URL in links.ref --&gt;
&lt;!-- vim:set et sw=4 ts=4 ft=rst: --&gt;
&lt;!-- vim:set et sw=4 ts=4 ft=rst: --&gt;
&lt;p&gt;最近几天又尝试了下 &lt;a class="reference external" href="https://macplay.github.io/categories/latex/"&gt;latex&lt;/a&gt;, 发现 Bibliography 的理念很好。它将文档中所有资料引用统一保存到 &lt;cite&gt;.bib&lt;/cite&gt; 文件中，然后在正文中以别名的形式插入。如果有需要的话，还可以自定义引用的显示格式。这大大简化了参考文献的管理和使用：平时统一维护所有的参考文献，甚至你一生中只需维护一份 &lt;cite&gt;.bib&lt;/cite&gt; 文件；而写作时不必麻烦地复制粘贴，用别名就可以方便地插入参考文献。&lt;/p&gt;
&lt;div class="sidebar"&gt;
&lt;p class="sidebar-title"&gt;LibreOffice 的「Navigator」功能&lt;/p&gt;
&lt;div class="figure align-center"&gt;
&lt;a class="reference external image-reference" href="https://macplay.github.io/images/libreoffice_navigator.png"&gt;&lt;img alt="/images/libreoffice_navigator.thumbnail.png" src="https://macplay.github.io/images/libreoffice_navigator.thumbnail.png"&gt;&lt;/a&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;如果要在「现代」文档处理软件中寻找对应的话，大约相当于 LibreOffice 的「Navigator」功能或者其它软件的「媒体库」功能。不同之处在于 Bibliography 针对纯文本文件而优化，不止针对单份文档还能在所有文档中依需要载入。&lt;/p&gt;
&lt;p&gt;尽管笔者平时写博客时并不用参考资料，但插入链接是很常见的操作。而该操作还是挺麻烦的——通常需要在浏览器中输入网址，等待其打开，然后分两次粘贴网址以及网页标题到 &lt;a class="reference external" href="https://github.com/qvacua/vimr"&gt;VimR&lt;/a&gt; 编辑器中。如果能够使用 Bibliography 的方式管理引用链接，则插入链接会方便许多——仅需麻烦一次，则全站博客均可以别名方式引用，毋需再次打开浏览器。显然这种统一管理有利于写作时的思维连贯性。而且今后如果有额外需求，比如想知道某链接在全站被引用了多少次，直接使用 &lt;cite&gt;ag&lt;/cite&gt; 或 &lt;cite&gt;grep&lt;/cite&gt; 命令搜索一下即可。&lt;/p&gt;
&lt;p&gt;另外一个麻烦点在于：博客的站内链接显然有利于读者快速寻找相关内容并跳转浏览，比如 tags 就是站内链接优化很好的一个点。然而插入 tags 也是个比较麻烦、容易打断思路的事情。完全可以将博客内的 tags 「封装」一下，在任何文章中都可以随时快速地插入 tag。实际上，也可以不局限于 tags，一些相对固定的链接均可用相同的手法操作。&lt;/p&gt;
&lt;p&gt;于是笔者花费了半天的时间试验了一下，发现完全可以使用 reStructuredText 的 &lt;cite&gt;include&lt;/cite&gt; 指令实现类似 Bibliography 的功能，对全站所有的链接引用进行统一管理。以下将简单的介绍一下我的做法。&lt;/p&gt;
&lt;p&gt;&lt;a href="https://macplay.github.io/posts/zai-restructuredtext-zhong-tong-yi-guan-li-yin-yong-lian-jie/"&gt;Read more…&lt;/a&gt; (1 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>markdown</category><category>nikola</category><category>reST</category><guid>https://macplay.github.io/posts/zai-restructuredtext-zhong-tong-yi-guan-li-yin-yong-lian-jie/</guid><pubDate>Tue, 13 Feb 2018 02:47:00 GMT</pubDate></item><item><title>Nikola 博客资源链接问题</title><link>https://macplay.github.io/posts/nikola-bo-ke-zi-yuan-lian-jie-wen-ti/</link><dc:creator>ashfinal</dc:creator><description>&lt;div&gt;&lt;p&gt;写博客的时候，经常会插入各种超链接。外部链接不必理会，正常插入即可。但是博客内部链接（譬如，请参阅上一篇文章： &lt;a class="reference external" href="https://macplay.github.io/posts/30-fen-zhong-jian-li-yi-ge-nikola-bo-ke/"&gt;30 分钟搭建一个 Nikola 博客&lt;/a&gt; ）却是需要额外关注，规范做法应该是这样： &lt;cite&gt;/posts/30-fen-zhong-jian-li-yi-ge-nikola-bo-ke/&lt;/cite&gt; ，而不是这样： &lt;cite&gt;https://macplay.github.com/posts/30-fen-zhong-jian-li-yi-ge-nikola-bo-ke/&lt;/cite&gt; 。从最终效果来看貌似没有区别，但是如果发布到其它站点或者将来更换域名，第二种做法的缺陷就暴露出来了：届时需要将成百上千篇文章中的链接进行相应替换。因此，及早规范博客内部链接还是比较重要的。&lt;/p&gt;
&lt;p&gt;&lt;a href="https://macplay.github.io/posts/nikola-bo-ke-zi-yuan-lian-jie-wen-ti/"&gt;Read more…&lt;/a&gt; (1 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>nikola</category><category>static site</category><guid>https://macplay.github.io/posts/nikola-bo-ke-zi-yuan-lian-jie-wen-ti/</guid><pubDate>Thu, 19 Oct 2017 09:41:40 GMT</pubDate></item><item><title>30 分钟搭建一个 Nikola 博客</title><link>https://macplay.github.io/posts/30-fen-zhong-jian-li-yi-ge-nikola-bo-ke/</link><dc:creator>ashfinal</dc:creator><description>&lt;div&gt;&lt;p&gt;本文将利用 &lt;a class="reference external" href="https://help.github.com/articles/what-is-github-pages/"&gt;GitHub Pages&lt;/a&gt; 服务 30 分钟内建立一个 &lt;a class="reference external" href="https://getnikola.com"&gt;Nikola&lt;/a&gt; 静态博客，静态页面的更新、维护等则交由 &lt;a class="reference external" href="https://travis-ci.org"&gt;TravisCI&lt;/a&gt; 服务完成，最终效果如本博客所示。文章主要 &lt;a class="reference external" href="https://getnikola.com/blog/automating-nikola-rebuilds-with-travis-ci.html"&gt;参考来源在此&lt;/a&gt; ，将只涉及搭建步骤，要求读者对命令行操作有一定了解。&lt;/p&gt;
&lt;p&gt;&lt;a href="https://macplay.github.io/posts/30-fen-zhong-jian-li-yi-ge-nikola-bo-ke/"&gt;Read more…&lt;/a&gt; (2 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>nikola</category><category>static site</category><category>travis</category><guid>https://macplay.github.io/posts/30-fen-zhong-jian-li-yi-ge-nikola-bo-ke/</guid><pubDate>Fri, 22 Sep 2017 07:50:29 GMT</pubDate></item><item><title>静态博客 Nikola 之写作实践</title><link>https://macplay.github.io/posts/jing-tai-bo-ke-nikola-zhi-xie-zuo-shi-jian/</link><dc:creator>macplay</dc:creator><description>&lt;div&gt;&lt;p&gt;本文分享 &lt;a class="reference external" href="https://getnikola.com"&gt;Nikola&lt;/a&gt; 博客的写作流程及注意事项，方便读者对最基础的操作--「更新文章」有直观了解。得益于 &lt;a class="reference external" href="https://getnikola.com"&gt;Nikola&lt;/a&gt; 和 &lt;a class="reference external" href="https://travis-ci.org"&gt;TravisCI&lt;/a&gt; 的紧密协同，「更新文章」只需把源文件放到指定目录，提交到 GitHub 即可。甚至在没有安装 &lt;a class="reference external" href="https://getnikola.com"&gt;Nikola&lt;/a&gt; 程序的电脑或者手机上也可以随时更新你的文章。&lt;/p&gt;
&lt;p&gt;&lt;a href="https://macplay.github.io/posts/jing-tai-bo-ke-nikola-zhi-xie-zuo-shi-jian/"&gt;Read more…&lt;/a&gt; (2 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>markdown</category><category>nikola</category><category>reST</category><guid>https://macplay.github.io/posts/jing-tai-bo-ke-nikola-zhi-xie-zuo-shi-jian/</guid><pubDate>Wed, 20 Sep 2017 03:32:34 GMT</pubDate></item><item><title>Nikola Internals</title><link>https://macplay.github.io/posts/nikola-internals/</link><dc:creator>ashfinal</dc:creator><description>&lt;div&gt;&lt;div class="section" id="nikola-internals"&gt;
&lt;h2&gt;Nikola Internals&lt;/h2&gt;
&lt;p class="lead"&gt;When trying to guide someone into adding a feature in Nikola, it hit me that
while the way it's structured makes sense &lt;strong&gt;to me&lt;/strong&gt; it is far from obvious.&lt;/p&gt;
&lt;p&gt;So, this is a short document explaining what each piece of Nikola does and
how it all fits together.&lt;/p&gt;
&lt;dl&gt;
&lt;dt&gt;Nikola is a Pile of Plugins&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;Most of Nikola is implemented as plugins using &lt;a class="reference external" href="http://yapsy.sourceforge.net/"&gt;Yapsy&lt;/a&gt;.
You can ignore that they are plugins and just think of them as regular python
modules and packages with a funny little &lt;code class="docutils literal"&gt;.plugin&lt;/code&gt; file next to them.&lt;/p&gt;
&lt;p&gt;So, 90% of the time, what you want to do is either write a new plugin or extend
an existing one.&lt;/p&gt;
&lt;p&gt;There are several kinds of plugins, all implementing interfaces defined in
&lt;code class="docutils literal"&gt;nikola/plugin_categories.py&lt;/code&gt; and documented in
&lt;a class="reference external" href="https://getnikola.com/extending.html"&gt;Extending Nikola&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;If your plugin has a dependency, please make sure it doesn't make Nikola
throw an exception when the dependency is missing. Try to fail gracefully
with an informative message.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;Commands are plugins&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;When you use &lt;code class="docutils literal"&gt;nikola foo&lt;/code&gt; you are using the plugin &lt;code class="docutils literal"&gt;command/foo&lt;/code&gt;. Those are
used to extend Nikola's command line. Their interface is defined in the &lt;code class="docutils literal"&gt;Command&lt;/code&gt;
class. They take options and arguments and do whatever you want, so go wild.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;The &lt;code class="docutils literal"&gt;build&lt;/code&gt; command is special&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;The &lt;code class="docutils literal"&gt;build&lt;/code&gt; command triggers a whole lot of things, and is the core of Nikola
because it's the one that you use to build sites. So it deserves its own section.&lt;/p&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;div class="section" id="the-build-command"&gt;
&lt;h3&gt;The Build Command&lt;/h3&gt;
&lt;p&gt;Nikola's goal is similar, deep at heart, to a Makefile. Take sources, compile them
into something, in this case a website. Instead of a Makefile, Nikola uses
&lt;a class="reference external" href="http://pydoit.org"&gt;doit&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Doit has the concept of "tasks". The 1 minute summary of tasks is that they have:&lt;/p&gt;
&lt;dl class="simple"&gt;
&lt;dt&gt;actions&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;What the task &lt;strong&gt;does&lt;/strong&gt;. For example, convert a markdown document into HTML.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;dependencies&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;If this file changes, then we need to redo the actions. If this configuration
option changes, redo it, etc.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;targets&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;Files that the action generates. No two actions can have the same targets.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;basename:name&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;Each task is identified by either a name or a basename:name pair.&lt;/p&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;div class="sidebar"&gt;
&lt;p class="sidebar-title"&gt;More about tasks&lt;/p&gt;
&lt;p&gt;If you ever want to do your own tasks, you really should read the doit
&lt;a class="reference external" href="http://pydoit.org/tasks.html"&gt;documentation on tasks&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;So, what Nikola does, when you use the build command, is to read the
configuration &lt;code class="docutils literal"&gt;conf.py&lt;/code&gt; from the current folder, instantiate
the &lt;code class="docutils literal"&gt;Nikola&lt;/code&gt; class, and have it generate a whole list of tasks for doit
to process. Then doit will decide which tasks need doing, and do them, in
the right order.&lt;/p&gt;
&lt;p&gt;The place where the tasks are generated is in &lt;code class="docutils literal"&gt;Nikola.gen_tasks&lt;/code&gt;, which collects tasks
from all the plugins inheriting &lt;code class="docutils literal"&gt;BaseTask&lt;/code&gt;, massages them a bit, then passes them
to doit.&lt;/p&gt;
&lt;p&gt;So, if you want things to happen on &lt;code class="docutils literal"&gt;build&lt;/code&gt; you want to create a Task plugin, or extend
one of the existing ones.&lt;/p&gt;
&lt;div class="sidebar"&gt;
&lt;p class="sidebar-title"&gt;Tests&lt;/p&gt;
&lt;p&gt;While Nikola is not a hardcore TDD project, we like tests. So, please add them if you can.
You can write unit tests or integration tests. (Doctests are not supported
anymore due to fragility.)&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="posts-and-pages"&gt;
&lt;h3&gt;Posts and Pages&lt;/h3&gt;
&lt;p&gt;Nikola has a concept of posts and pages. Both are more or less the same thing, except
posts are added into RSS feeds and pages are not. All of them are in a list called
"the timeline" formed by objects of class &lt;code class="docutils literal"&gt;Post&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;When you are creating a task that needs the list of posts and/or pages (for example,
the RSS creation plugin) on task execution time, your plugin should call &lt;code class="docutils literal"&gt;self.site.scan_posts()&lt;/code&gt;
in &lt;code class="docutils literal"&gt;gen_tasks&lt;/code&gt; to ensure the timeline is created and available in
&lt;code class="docutils literal"&gt;self.site.timeline&lt;/code&gt;. You should not modify the timeline, because it will cause consistency issues.&lt;/p&gt;
&lt;div class="sidebar"&gt;
&lt;p class="sidebar-title"&gt;scan_posts&lt;/p&gt;
&lt;p&gt;The &lt;code class="docutils literal"&gt;Nikola.scan_posts&lt;/code&gt; function can be used in plugins to force the
timeline creation, for example, while creating the tasks.&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;Your plugin can use the timeline to generate "stuff" (technical term). For example,
Nikola comes with plugins that use the timeline to create a website (surprised?).&lt;/p&gt;
&lt;p&gt;The workflow included with nikola is as follows (incomplete!):&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;&lt;p&gt;The post is assigned a compiler based on its extension and the &lt;code class="docutils literal"&gt;COMPILERS&lt;/code&gt; option.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The compiler is applied to the post data and a "HTML fragment" is produced. That
fragment is stored in a cache (the &lt;code class="docutils literal"&gt;posts&lt;/code&gt; plugin).&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The configured theme has templates (and a template engine), which are applied to the post's
HTML fragment and metadata (the &lt;code class="docutils literal"&gt;pages&lt;/code&gt; plugin).&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The original sources for the post are copied to some accessible place (the &lt;code class="docutils literal"&gt;sources&lt;/code&gt; plugin).&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;If the post is tagged, some pages and RSS feeds for each tag are updated (the &lt;code class="docutils literal"&gt;tags&lt;/code&gt; plugin).&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;If the post is new, it's included in the blog's RSS feed (the &lt;code class="docutils literal"&gt;rss&lt;/code&gt; plugin).&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The post is added in the right place in the index pages for the blog (the &lt;code class="docutils literal"&gt;indexes&lt;/code&gt; plugin).&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;CSS/JS/Images for the theme are put in the right places (the &lt;code class="docutils literal"&gt;copy_assets&lt;/code&gt; and &lt;code class="docutils literal"&gt;bundles&lt;/code&gt; plugins).&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;A File describing the whole site is created (the &lt;code class="docutils literal"&gt;sitemap&lt;/code&gt; plugin).&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;You can add whatever you want to that list: just create a plugin for it.&lt;/p&gt;
&lt;p&gt;You can also expand Nikola's capabilities at several points:&lt;/p&gt;
&lt;dl class="simple"&gt;
&lt;dt&gt;compilers&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;Nikola supports a variety of markups. If you want to add another one, you need to create
a &lt;code class="docutils literal"&gt;Compiler&lt;/code&gt; plugin.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;templates&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;Nikola's themes can use Jinja2 or Mako templates. If you prefer another template system,
you have to create a &lt;code class="docutils literal"&gt;TemplateSystem&lt;/code&gt; plugin.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;themes&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;To change how the generated site looks, you can create custom themes.&lt;/p&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;p&gt;And of course, you can also replace or extend each of the existing plugins.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="nikola-architecture"&gt;
&lt;h2&gt;Nikola Architecture&lt;/h2&gt;
&lt;a class="reference external image-reference" href="https://getnikola.com/images/architecture.png"&gt;&lt;img alt="https://getnikola.com/images/architecture.thumbnail.png" src="https://getnikola.com/images/architecture.thumbnail.png"&gt;&lt;/a&gt;
&lt;/div&gt;&lt;/div&gt;</description><category>nikola</category><category>reST</category><guid>https://macplay.github.io/posts/nikola-internals/</guid><pubDate>Mon, 18 Sep 2017 10:33:21 GMT</pubDate></item></channel></rss>