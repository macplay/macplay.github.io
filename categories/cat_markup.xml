<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="../assets/xml/rss.xsl" media="all"?><rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>MacPlay (Posts about markup)</title><link>https://macplay.github.io/</link><description></description><atom:link href="https://macplay.github.io/categories/cat_markup.xml" rel="self" type="application/rss+xml"></atom:link><language>zh_cn</language><copyright>Contents © 2020 &lt;a href="mailto:ashfinal@sina.cn"&gt;ashfinal&lt;/a&gt; </copyright><lastBuildDate>Wed, 26 Aug 2020 08:50:33 GMT</lastBuildDate><generator>Nikola (getnikola.com)</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>从 URL 构建行内链接</title><link>https://macplay.github.io/posts/cong-url-gou-jian-xing-nei-lian-jie/</link><dc:creator>ashfinal</dc:creator><description>&lt;div&gt;&lt;p&gt;昨天看到论坛有人谈到 &lt;a class="reference external" href="https://emacs-china.org/t/topic/5301"&gt;从 URL 构建 Markdown 行内链接 - Emacs-general - Emacs China&lt;/a&gt; 。其实，这个功能早就存在于 Emmet 插件中。之前个人写 Markdown 文档的时候就用到过，体验非常不错。具体就是：在文档内的链接处按下快捷键，将会自动提取网页标题，并插入 Markdown 风格的行内链接。这样你就不必再额外复制链接标题，甚至个别情况下还得提前在浏览器中打开链接。&lt;/p&gt;
&lt;p&gt;实际上，该功能不仅能构建 Markdown 行内链接，还可以在网页文件中使用 &lt;code class="docutils literal"&gt;&amp;lt;a&amp;gt;&lt;/code&gt; 标签构建 HTML 风格的链接。在 Vim 编辑器中，文件类型是自动识别的，因此并不需要额外做什么设置。&lt;/p&gt;
&lt;p&gt;鉴于我个人 &lt;a class="reference external" href="https://macplay.github.io/posts/cong-markdown-dao-restructuredtext/"&gt;从 Markdown 转向 reStructuredText&lt;/a&gt; 已久，对该功能自然而然就用的不多起来。然而，当写 reStructuredText 文档时，当插入链接时不得不皱着眉，分两次分别复制网页链接和标题，再拼凑成 reStructuredText 风格的行内链接时。我总是不由地想起 Markdown 插入链接时的惬意顺畅。只不过，个人比较懒 - - 一直没采取任何行动，忍受着书写体验下降的情况。&lt;/p&gt;
&lt;p&gt;现在经网友这么一提，心思抖起，觉得是时候解决一下这个“小问题”了。&lt;/p&gt;
&lt;p&gt;&lt;a href="https://macplay.github.io/posts/cong-url-gou-jian-xing-nei-lian-jie/"&gt;Read more…&lt;/a&gt; (1 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>markdown</category><category>reST</category><category>vim</category><guid>https://macplay.github.io/posts/cong-url-gou-jian-xing-nei-lian-jie/</guid><pubDate>Sat, 17 Mar 2018 11:57:58 GMT</pubDate></item><item><title>从 Markdown 到 reStructuredText（四）</title><link>https://macplay.github.io/posts/cong-markdown-dao-restructuredtextsi/</link><dc:creator>ashfinal</dc:creator><description>&lt;div&gt;&lt;p&gt;本文是《从 Markdown 到 reStructuredText》系列文章的第四篇。和 Markdown 一样，reStructuredText 也是一种易读易写的纯文本标记语言，不过功能上更加强大（而且标准统一）。如果想了解其对应于 Markdown 的基本语法，请阅读 &lt;a class="reference external" href="https://macplay.github.io/posts/cong-markdown-dao-restructuredtext/"&gt;第一篇文章&lt;/a&gt; 。本文继续 &lt;a class="reference external" href="https://macplay.github.io/posts/cong-markdown-dao-restructuredtextsan/"&gt;上一篇文章&lt;/a&gt; 的话题，试用和探索一下 reStructuredText 导出为其它格式的功能。&lt;/p&gt;
&lt;p&gt;reStructuredText 安装包 &lt;a class="reference external" href="http://docutils.sourceforge.net"&gt;docutils&lt;/a&gt; &lt;a class="footnote-reference brackets" href="https://macplay.github.io/posts/cong-markdown-dao-restructuredtextsi/#id5" id="id3"&gt;1&lt;/a&gt; 额外包含了一些 Python 脚本，以支持导出到其它格式。这里只谈一谈比较关心的 HTML、S5 Slides、Office 文档、PDF 等格式的支持情况。&lt;/p&gt;
&lt;div class="contents topic" id="id4"&gt;
&lt;p class="topic-title"&gt;文档目录&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://macplay.github.io/posts/cong-markdown-dao-restructuredtextsi/#html" id="id11"&gt;HTML 导出&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://macplay.github.io/posts/cong-markdown-dao-restructuredtextsi/#s5-slides" id="id12"&gt;S5 Slides&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://macplay.github.io/posts/cong-markdown-dao-restructuredtextsi/#office" id="id13"&gt;Office 文档导出&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://macplay.github.io/posts/cong-markdown-dao-restructuredtextsi/#pdf" id="id14"&gt;PDF 格式导出&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://macplay.github.io/posts/cong-markdown-dao-restructuredtextsi/#id10" id="id15"&gt;总结&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;p&gt;&lt;a href="https://macplay.github.io/posts/cong-markdown-dao-restructuredtextsi/"&gt;Read more…&lt;/a&gt; (2 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>pdf</category><category>reST</category><category>static site</category><guid>https://macplay.github.io/posts/cong-markdown-dao-restructuredtextsi/</guid><pubDate>Sat, 14 Oct 2017 10:37:28 GMT</pubDate></item><item><title>从 Markdown 到 reStructuredText（三）</title><link>https://macplay.github.io/posts/cong-markdown-dao-restructuredtextsan/</link><dc:creator>ashfinal</dc:creator><description>&lt;div&gt;&lt;p&gt;本文是《从 Markdown 到 reStructuredText》系列文章的第三篇。和 Markdown 一样，reStructuredText 也是一种易读易写的纯文本标记语言，不过功能上更加强大（而且标准统一）。如果想了解其对应于 Markdown 的基本语法，请阅读 &lt;a class="reference external" href="https://macplay.github.io/posts/cong-markdown-dao-restructuredtext/"&gt;第一篇文章&lt;/a&gt; 。本文继续 &lt;a class="reference external" href="https://macplay.github.io/posts/cong-markdown-dao-restructuredtexter/"&gt;上一篇文章&lt;/a&gt; 的话题，聊一聊标记语言的样式问题，确切的说是 reStructuredText 在静态博客 Nikola 中的样式写法。&lt;/p&gt;
&lt;p&gt;“样式？标记语言还需要考虑样式？”估计不少人心里会犯嘀咕。然而，标记语言一直强调的是 &lt;strong&gt;易读易写&lt;/strong&gt; ，无需专门的商业版权软件来编辑， &lt;strong&gt;同时，纯文本可被转换为其它格式的文档&lt;/strong&gt;  &lt;a class="footnote-reference brackets" href="https://macplay.github.io/posts/cong-markdown-dao-restructuredtextsan/#id4" id="id3"&gt;1&lt;/a&gt; 。转换为其它格式多半少不了样式，样式本身有助于读者对文档内容的理解，传递赏心悦目的文档对读者本人也是一种尊重。标记语言宣称的“毋需关注样式”更多的是谴责 &lt;strong&gt;过分关注样式&lt;/strong&gt; ，以至于丢掉了文档之魂——内容。&lt;/p&gt;
&lt;p&gt;个人以为，标记语言自始至终贯彻的原则只有一点： &lt;strong&gt;内容与样式分离&lt;/strong&gt; 。摆脱束缚用最简单的纯文本书写，而必要时又可以套用现成样式模板，导出或专业或活波……不同风格的文档方便分发。&lt;/p&gt;
&lt;dl class="footnote brackets"&gt;
&lt;dt class="label" id="id4"&gt;&lt;span class="brackets"&gt;&lt;a class="fn-backref" href="https://macplay.github.io/posts/cong-markdown-dao-restructuredtextsan/#id3"&gt;1&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;见 &lt;a class="reference external" href="https://macplay.github.io/posts/cong-markdown-dao-restructuredtext/"&gt;第一篇文章&lt;/a&gt; 宗旨 -&amp;gt; reStructuredText 的预期目标&lt;/p&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;p&gt;&lt;a href="https://macplay.github.io/posts/cong-markdown-dao-restructuredtextsan/"&gt;Read more…&lt;/a&gt; (2 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>reST</category><category>static site</category><guid>https://macplay.github.io/posts/cong-markdown-dao-restructuredtextsan/</guid><pubDate>Wed, 11 Oct 2017 07:26:32 GMT</pubDate></item><item><title>使用 Vim 在 Markdown 及 rst 文档中创建表格</title><link>https://macplay.github.io/posts/shi-yong-vim-zai-markdown-ji-rst-wen-dang-zhong-chuang-jian-biao-ge/</link><dc:creator>ashfinal</dc:creator><description>&lt;div&gt;&lt;p&gt;之前提到过 reStructuredText 的表格类型 &lt;a class="reference external" href="https://macplay.github.io/posts/cong-markdown-dao-restructuredtext/#table"&gt;Grid Tables&lt;/a&gt; 书写困难，普通编辑器难以胜任，可能有人好奇笔者是如何做的。对于 Vim、Emacs 两大编辑器来说，表格创建任务非常简单：&lt;/p&gt;
&lt;video src="https://macplay.github.io/videos/vim_table.mp4" loop autoplay muted playsinline&gt;
Your browser does not support the video tag.
&lt;/video&gt;&lt;p&gt;笔者平时使用较多的是 Vim 编辑器，借助强大的 &lt;a class="reference external" href="https://github.com/dhruvasagar/vim-table-mode"&gt;vim-table-mode&lt;/a&gt; 插件，只需正常输入表格内容和竖线符号 &lt;code class="docutils literal"&gt;|&lt;/code&gt; 就可以，其它事情如填充和对齐等等插件会自动处理。笔者针对 &lt;a class="reference external" href="https://github.com/dhruvasagar/vim-table-mode"&gt;vim-table-mode&lt;/a&gt; 插件做了几行配置，使其支持 Markdown、rst、org 表格的创建（org 表格在上图中没有展示），如果有人感兴趣的话，可以看一下个人 &lt;a class="reference external" href="https://github.com/ashfinal/vimrc-config/blob/0cba64e3a384fc78483a431b45b65a50daba34dd/.vimrc#L750"&gt;vimrc 配置&lt;/a&gt; 的相应部分。&lt;/p&gt;
&lt;p&gt;PS：发现录屏如果使用 GIF 格式，无论怎样压缩都达不到理想的画质和文件大小。最后使用 MP4 格式，1 分 53 秒时长的 720P 视频，压缩后仅仅 836 KB！感觉以后文章中插入动图可以抛弃 GIF 格式了。&lt;/p&gt;
&lt;p&gt;读者们注意到上面录屏其实是视频而不是图片吗？ :)&lt;/p&gt;&lt;/div&gt;</description><category>markdown</category><category>reST</category><category>vim</category><guid>https://macplay.github.io/posts/shi-yong-vim-zai-markdown-ji-rst-wen-dang-zhong-chuang-jian-biao-ge/</guid><pubDate>Tue, 10 Oct 2017 13:15:21 GMT</pubDate></item><item><title>从 Markdown 到 reStructuredText（二）</title><link>https://macplay.github.io/posts/cong-markdown-dao-restructuredtexter/</link><dc:creator>ashfinal</dc:creator><description>&lt;div&gt;&lt;dl class="docinfo simple"&gt;
&lt;dt class="author"&gt;Author&lt;/dt&gt;
&lt;dd class="author"&gt;&lt;p&gt;ashfinal&lt;/p&gt;
&lt;/dd&gt;
&lt;dt class="contact"&gt;Contact&lt;/dt&gt;
&lt;dd class="contact"&gt;&lt;p&gt;&lt;a class="reference external" href="mailto:ashfinal@sina.cn"&gt;ashfinal@sina.cn&lt;/a&gt;&lt;/p&gt;
&lt;/dd&gt;
&lt;dt class="revision"&gt;Revision&lt;/dt&gt;
&lt;dd class="revision"&gt;&lt;p&gt;1008&lt;/p&gt;
&lt;/dd&gt;
&lt;dt class="date"&gt;Date&lt;/dt&gt;
&lt;dd class="date"&gt;&lt;p&gt;2017-10-08&lt;/p&gt;
&lt;/dd&gt;
&lt;dt class="copyright"&gt;Copyright&lt;/dt&gt;
&lt;dd class="copyright"&gt;&lt;p&gt;&lt;a class="reference external" href="https://creativecommons.org/licenses/by-nc-sa/3.0/deed.zh"&gt;CC BY-NC-SA 3.0&lt;/a&gt;&lt;/p&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;p&gt;本文是《从 Markdown 到 reStructuredText》系列文章的第二篇。和 Markdown 一样，reStructuredText 也是一种易读易写的纯文本标记语言，不过功能上更加强大（而且标准统一）。如果想了解其对应于 Markdown 的基本语法，请阅读 &lt;a class="reference external" href="https://macplay.github.io/posts/cong-markdown-dao-restructuredtext/"&gt;上一篇文章&lt;/a&gt; 。本文主要从文档写作需求出发，聊一聊 reStructuredText 相对于 Markdown 的超集部分。&lt;/p&gt;
&lt;p&gt;&lt;a href="https://macplay.github.io/posts/cong-markdown-dao-restructuredtexter/"&gt;Read more…&lt;/a&gt; (4 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>reST</category><category>static site</category><guid>https://macplay.github.io/posts/cong-markdown-dao-restructuredtexter/</guid><pubDate>Sun, 08 Oct 2017 06:45:54 GMT</pubDate></item><item><title>从 Markdown 到 reStructuredText</title><link>https://macplay.github.io/posts/cong-markdown-dao-restructuredtext/</link><dc:creator>ashfinal</dc:creator><description>&lt;div&gt;&lt;p&gt;如果你正在使用 Markdown 尚嫌其功能不足，本文提供了平滑过渡到 reStructuredText 的语法指导。从来没有接触过任何标记语言的读者，以及正在使用其它标记语言的读者，也可以通过阅读本文了解到 reStructuredText 的基本用法。文章结构基本上借鉴 &lt;a class="reference external" href="http://wowubuntu.com/markdown/"&gt;Markdown 语法说明&lt;/a&gt; ，相对 Markdown 的超集部分仅会简单提及——这些部分将会在其它文章中着重讲解。&lt;/p&gt;
&lt;p&gt;&lt;a href="https://macplay.github.io/posts/cong-markdown-dao-restructuredtext/"&gt;Read more…&lt;/a&gt; (5 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>reST</category><category>static site</category><guid>https://macplay.github.io/posts/cong-markdown-dao-restructuredtext/</guid><pubDate>Wed, 04 Oct 2017 08:20:05 GMT</pubDate></item><item><title>静态博客 Nikola 之写作实践</title><link>https://macplay.github.io/posts/jing-tai-bo-ke-nikola-zhi-xie-zuo-shi-jian/</link><dc:creator>macplay</dc:creator><description>&lt;div&gt;&lt;p&gt;本文分享 &lt;a class="reference external" href="https://getnikola.com"&gt;Nikola&lt;/a&gt; 博客的写作流程及注意事项，方便读者对最基础的操作--「更新文章」有直观了解。得益于 &lt;a class="reference external" href="https://getnikola.com"&gt;Nikola&lt;/a&gt; 和 &lt;a class="reference external" href="https://travis-ci.org"&gt;TravisCI&lt;/a&gt; 的紧密协同，「更新文章」只需把源文件放到指定目录，提交到 GitHub 即可。甚至在没有安装 &lt;a class="reference external" href="https://getnikola.com"&gt;Nikola&lt;/a&gt; 程序的电脑或者手机上也可以随时更新你的文章。&lt;/p&gt;
&lt;p&gt;&lt;a href="https://macplay.github.io/posts/jing-tai-bo-ke-nikola-zhi-xie-zuo-shi-jian/"&gt;Read more…&lt;/a&gt; (2 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>markdown</category><category>nikola</category><category>reST</category><guid>https://macplay.github.io/posts/jing-tai-bo-ke-nikola-zhi-xie-zuo-shi-jian/</guid><pubDate>Wed, 20 Sep 2017 03:32:34 GMT</pubDate></item><item><title>Pygal charts get started</title><link>https://macplay.github.io/posts/pygal-charts-get-started/</link><dc:creator>ashfinal</dc:creator><description>&lt;div&gt;&lt;p&gt;If you are using reStructuredText and install pygal, Nikola has support for rather nice charts
with little effort, and i's even semi-interactive (hover your pointer over the legend!):&lt;/p&gt;
&lt;pre class="code rest"&gt;&lt;a name="rest_code_655baa50b6f8406b8bfa9b4f5eed0abd-1"&gt;&lt;/a&gt;&lt;span class="p"&gt;..&lt;/span&gt; &lt;span class="ow"&gt;chart&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt; StackedLine
&lt;a name="rest_code_655baa50b6f8406b8bfa9b4f5eed0abd-2"&gt;&lt;/a&gt;   &lt;span class="nc"&gt;:title:&lt;/span&gt; 'Browser usage evolution (in %)'
&lt;a name="rest_code_655baa50b6f8406b8bfa9b4f5eed0abd-3"&gt;&lt;/a&gt;   &lt;span class="nc"&gt;:fill:&lt;/span&gt; True
&lt;a name="rest_code_655baa50b6f8406b8bfa9b4f5eed0abd-4"&gt;&lt;/a&gt;   &lt;span class="nc"&gt;:x_labels:&lt;/span&gt; ['2002','2003','2004','2005','2006','2007','2008','2009','2010','2011','2012']
&lt;a name="rest_code_655baa50b6f8406b8bfa9b4f5eed0abd-5"&gt;&lt;/a&gt;   &lt;span class="nc"&gt;:style:&lt;/span&gt; DefaultStyle
&lt;a name="rest_code_655baa50b6f8406b8bfa9b4f5eed0abd-6"&gt;&lt;/a&gt;
&lt;a name="rest_code_655baa50b6f8406b8bfa9b4f5eed0abd-7"&gt;&lt;/a&gt;   ('Others',  [14.2, 15.4, 15.3,  8.9,    9, 10.4,  8.9,  5.8,  6.7,  6.8,  7.5])
&lt;a name="rest_code_655baa50b6f8406b8bfa9b4f5eed0abd-8"&gt;&lt;/a&gt;   ('IE',      [85.8, 84.6, 84.7, 74.5,   66, 58.6, 54.7, 44.8, 36.2, 26.6, 20.1])
&lt;a name="rest_code_655baa50b6f8406b8bfa9b4f5eed0abd-9"&gt;&lt;/a&gt;   ('Firefox', [None, None, None, 16.6,   25,   31, 36.4, 45.5, 46.3, 42.8, 37.1])
&lt;a name="rest_code_655baa50b6f8406b8bfa9b4f5eed0abd-10"&gt;&lt;/a&gt;   ('Chrome',  [None, None, None, None, None, None,    0,  3.9, 10.8, 23.8, 35.3])
&lt;/pre&gt;&lt;p&gt;&lt;a href="https://macplay.github.io/posts/pygal-charts-get-started/"&gt;Read more…&lt;/a&gt; (3 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>chart</category><category>pygal</category><category>python</category><category>reST</category><guid>https://macplay.github.io/posts/pygal-charts-get-started/</guid><pubDate>Mon, 18 Sep 2017 03:09:34 GMT</pubDate></item></channel></rss>